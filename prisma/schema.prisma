// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           Int      @id @default(autoincrement())
  things_id    String   @unique
  name         String
  email        String   @unique
  phone        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users        User[]   @relation("TenantUsers")
  customers    Customer[]   @relation("TenantCustomers")
  requests     Request[]
  devices      Device[]
  assets       Asset[]
  dashboards   Dashboard[]
  planId       Int
  plan         Plan     @relation(fields: [planId], references: [id], onDelete: SetNull)
}

model Dashboard {
  id        Int        @id @default(autoincrement())
  things_id String
  name      String
  tenantId  Int
  tenant    Tenant     @relation(fields: [tenantId], references: [id])

  customers Customer[] @relation("CustomerDashboards") // Prisma خودش جدول واسط می‌سازه

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  things_id String   @unique
  email     String   @unique
  name      String
  tenantId  Int
  tenant    Tenant   @relation("TenantCustomers", fields: [tenantId], references: [id])

  dashboards Dashboard[] @relation("CustomerDashboards") // Prisma خودش جدول واسط می‌سازه

  devices   Device[]
  assets    Asset[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id        Int      @id @default(autoincrement())
  things_id String   @unique
  email     String   @unique
  phone     String?   @unique
  firstName      String?
  lastName      String?
  role      String   // می‌تواند مقادیری مانند "admin" یا "user" داشته باشد
  customerId  String? @unique
  tenantId  Int
  tenant    Tenant   @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id        Int      @id @default(autoincrement())
  things_id String   @unique
  name      String
  type      String   // نوع دستگاه (مثلا سنسور، کنترلر و ...)
  tenantId  Int
  customerId  Int?
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  customer  Customer? @relation(fields: [customerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requests  Request[] // درخواست‌هایی که برای این دستگاه ثبت شده
}

model Asset {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // نوع دستگاه (مثلا سنسور، کنترلر و ...)
  tenantId  Int
  customerId  Int
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  customer  Customer @relation(fields: [customerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  tenant    Tenant @relation(fields: [tenantId], references: [id])
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id])
  requestTime DateTime @default(now()) // زمان درخواست
  requestType String  // نوع درخواست، مثلا "GET_TELEMETRY", "COMMAND"
  status     String  // وضعیت پردازش: "PENDING", "SUCCESS", "FAILED"
}

model Plan {
  id               Int    @id @default(autoincrement())
  name             String @unique
  maxRequestsPerHour Int  // حداکثر درخواست مجاز در ساعت
  maxDevices      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenants         Tenant[]
}

model SyncLog {
  id            Int      @id @default(autoincrement())
  entity        String
  timestamp     DateTime @default(now())
  status        String
}
